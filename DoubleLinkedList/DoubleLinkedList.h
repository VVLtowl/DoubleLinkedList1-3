/*********************************************************
* @brief	双方向リストのヘッダーファイル
* @date		2022/10/11
********************************************************/
#pragma once

//========== 双方向リスト ==========
template <typename DataType>
class DoubleLinkedList
{
private:
	//========== ノード構造体 ==========
	struct Node
	{
		/*********************************************************
		* @brief	前のノードへのポインタ
		********************************************************/
		Node* pPrev = nullptr;

		/*********************************************************
		* @brief	次のノードへのポインタ
		********************************************************/
		Node* pNext = nullptr;

		/*********************************************************
		* @brief	データ
		********************************************************/
		DataType data;
	};

public:
	//==========  コンストイテレータ ==========
	class ConstIterator
	{
	protected:
		/*********************************************************
		* @brief	ノードへのポインタ
		********************************************************/
		Node* m_pNode;

		/*********************************************************
		* @brief	リストへのポインタ
		********************************************************/
		const DoubleLinkedList* m_pList;

	protected:
		/*********************************************************
		* @brief	有効なイテレータであるか
		* @detail	リストの参照がある、
		*			同じリストであることを確認する。
		* @param	list: 同じリストであるかの判断用リストへのポインタ
		* @return	全条件足した場合trueを返す、ほかの場合falseを返す
		********************************************************/
		bool IsVaild(const DoubleLinkedList* const list);

		/*********************************************************
		* @brief	指したノードはダミーノードであるか
		* @detail	参照がないときダミーではないと判断。
		*			リストの参照でこのリストのダミーノードであるかを確認。
		* @return	ダミーノードの場合trueを返す、ほかの場合falseを返す
		********************************************************/
		bool IsDummy();

		/*********************************************************
		* @brief	指すリストへのポインタを取得する(const版)
		* @return	指すリストのポインタを返す
		********************************************************/
		const DoubleLinkedList* GetList()const { return m_pList; };

		/*********************************************************
		* @brief	指すノードへのポインタを取得する(const版)
		* @return	指すノードのポインタを返す
		********************************************************/
		Node* GetNode() const { return m_pNode; };

	public:
		/*********************************************************
		* @brief	コンストラクタ　
		********************************************************/
		ConstIterator() :
			m_pNode(nullptr),
			m_pList(nullptr) {};

		/*********************************************************
		* @brief	リストの先頭に向かって一つ進める（前置デクリメント）
		* @detail	リストの参照がない場合失敗になる。
		*			リストが空である場合失敗になる。
		*			直前ノードは先頭ノードの場合失敗になる。
		* @return	演算された後のイテレータを返す
		********************************************************/
		ConstIterator& operator--();

		/*********************************************************
		* @brief	リストの末尾に向かって一つ進める（前置インクリメント）
		* @detail	リストの参照がない場合失敗になる。
		*			ノードはダミーの場合失敗になる。
		* @return	演算された後のイテレータを返す
		********************************************************/
		ConstIterator& operator++();

		/*********************************************************
		* @brief	リストの末尾に向かって一つ進める（後置インクリメント）
		* @detail	リストの参照がない場合失敗になる。
		*			リストが空である場合失敗になる。
		*			ノードは先頭ノードの場合失敗になる。
		* @return	演算された後のイテレータを返す
		********************************************************/
		ConstIterator operator--(int i);

		/*********************************************************
		* @brief	リストの末尾に向かって一つ進める（後置インクリメント）
		* @detail	リストの参照がない場合失敗になる。
		*			直後ノードはダミーの場合失敗になる。
		* @return	演算された後のイテレータを返す
		********************************************************/
		ConstIterator operator++(int i);

		/*********************************************************
		* @brief	コピーを行う（コピーコンストラクタ）
		* @detail	宣言時、引数、戻り値の3つの動作でコピーがとられた時に実行される。
		********************************************************/
		ConstIterator(const ConstIterator& constIter);

		/*********************************************************
		* @brief	代入を行う
		* @return	代入を行ったのイテレータを返す
		********************************************************/
		ConstIterator& operator=(const ConstIterator& constIter);


		//constメソッド

		/*********************************************************
		* @brief	イテレータの指す要素を取得する(const版)
		* @detail	リストの参照がない場合失敗になる。
		* 			ノードはダミーの場合失敗になる。
		* @return	指した要素を返す
		********************************************************/
		const DataType& operator*()const;

		/*********************************************************
		* @brief	同一か比較する
		* @return	同一の場合trueを返す、異なる場合falseを返す
		********************************************************/
		bool operator==(const ConstIterator& constIter)const;

		/*********************************************************
		* @brief	異なるか比較する
		* @return	異なる場合trueを返す、同一の場合falseを返す
		********************************************************/
		bool operator!=(const ConstIterator& constIter)const;

		//DoubleLinkedListの関数内で、有効イテレータ確認するため
		friend DoubleLinkedList;
	};

	//========== イテレータ ==========
	class Iterator :public ConstIterator
	{
	private:
		//using ConstIterator::m_pNode;
		//using ConstIterator::m_pList;
	public:
		/*********************************************************
		* @brief	イテレータの指す要素を取得する(非const版)
		* @detail	リストの参照がない場合失敗になる。
		* 			ノードはダミーの場合失敗になる。
		* @return	指した要素を返す
		********************************************************/
		DataType& operator*();

		friend DoubleLinkedList;
	};

private:
	/*********************************************************
	* @brief	ダミーノードへのポインタ　先頭と末尾の判断用 
	* @detail	m_pDummy->pPrevは最後の要素を指す、m_pDummy->pNextは先頭要素を指す
	********************************************************/
	Node* m_pDummy;

public:
	/*********************************************************
	* @brief	デストラクタ
	* @detail	動的作成したノードを全部解放
	********************************************************/
	~DoubleLinkedList();

	/*********************************************************
	* @brief	コンストラクタ
	* @detail	ダミーノードを作成
	********************************************************/
	DoubleLinkedList();

	/*********************************************************
	* @brief	データの挿入
	* @detail	イテレータが有効であるかを確認、
	*			有効ではないかを確認。
	* @return	挿入成功の場合trueを返す
	*			挿入失敗の場合falseを返す
	********************************************************/
	bool Insert(ConstIterator& position, const DataType& data);

	/*********************************************************
	* @brief	データの削除
	* @detail	リストが空ではないかの確認、
	*			空ではない場合イテレータが有効であるかの確認、
	*			有効の場合ダミーではないかの確認。
	* @return	削除成功の場合trueを返す
	*			削除失敗の場合falseを返す
	********************************************************/
	bool Remove(ConstIterator& position);

	/*********************************************************
	* @brief	先頭イテレータ取得する
	* @detail	リストが空である場合、ダミーノードを指すイテレータを返す、
	*			空ではない場合、先頭ノードを指すイテレータを返す。
	* @return	先頭イテレータを返す
	********************************************************/
	Iterator Begin();

	/*********************************************************
	* @brief	末尾イテレータ取得する
	* @detail	ダミーノードを指すイテレータを返す。
	* @return	末尾イテレータを返す
	********************************************************/
	Iterator End();


	//constメソッド

	/*********************************************************
	* @brief	データ数を取得する
	* @detail	ループで加算して、データ数を計算する。
	*			constメソッドである。
	* @return	データ数を返す
	********************************************************/
	int Count()const;

	/*********************************************************
	* @brief	先頭コンストイテレータ取得する
	* @detail	リストが空である場合、ダミーノードを指すコンストイテレータを返す
	*			空ではない場合、先頭ノードを指すコンストイテレータを返す。
	* @return	先頭コンストイテレータを返す
	********************************************************/
	ConstIterator CBegin()const;

	/*********************************************************
	* @brief	末尾イテレータ取得する
	* @detail	ダミーノードを指すコンストイテレータを返す。
	* @return	末尾コンストイテレータを返す
	********************************************************/
	ConstIterator CEnd()const;
};

#include "DoubleLinkedList.inl"